# swagger.yml

# The version of your OpenAPI definition
openapi: 3.0.0
info:
    title: "Portfolio Manager REST API"
    description: "API for managing financial portfolios"
    version: "1.0.0"

servers:
    # Defines the root path of your API
    # All API paths will be accessible through
    # http://localhost:8000/api
    - url: "/api"

# Components are building blocks in your OpenAPI specification
# that you can reference from other parts of your sepcification
components:
    schemas:
        Error:
            # Data type of the schema
            type: "object"
            # Required properties
            # Any property you define as required
            # must exist in properties
            required:
                - status
                - detail
            properties:
                status:
                    type: "integer"
                detail:
                    type: "string"
        User:
            type: "object"
            required:
                - email
                - password
            properties:
                email:
                    type: "string"
                password:
                    type: "string"

        Currency:
            type: "object"
            required:
                - code
                - name
            properties:
                code:
                    type: "string"
                name:
                    type: "string"

        Portfolio:
            type: "object"
            required:
                - name
                - currency_id
            properties:
                name:
                    type: "string"
                currency_id:
                    type: "integer"

        Security:
            type: "object"
            required:
                - symbol
                - name
                - exchange
                - asset_type
                - status
            properties:
                symbol:
                    type: "string"
                name:
                    type: "string"
                exchange:
                    type: "string"
                asset_type:
                    type: "string"
                status:
                    type: "string"

        Trade:
            type: "object"
            required:
                - security_id
                - currency_id
                - trade_type
                - trade_datetime
                - unit_price
                - quantity
                - brokerage_fee
            properties:
                security_id:
                    type: "integer"
                currency_id:
                    type: "integer"
                trade_type:
                    type: "string"
                trade_datetime:
                    type: "string"
                unit_price:
                    type: "number"
                quantity:
                    type: "number"
                brokerage_fee:
                    type: "number"

    responses:
        BadRequest:
            description: "Bad request"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        Unauthorized:
            description: "Unathorized access"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        NotFound:
            description: "Resource not found"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        InternalServerError:
            description: "Internal server error"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        Success:
            description: "Successfull operation"
            content:
                application/json:
                    schema:
                        type: "object"
                        required:
                            - id
                            - email
                            - message
                        properties:
                            id:
                                type: "integer"
                            email:
                                type: "string"
                            message:
                                type: "string"

    parameters:
        portfolio_id:
            name: "portfolio_id"
            description: "Id of the portfolio to get"
            in: path
            required: true
            schema:
                type: "integer"

        trade_id:
            name: "trade_id"
            description: "Id of the trade"
            in: path
            required: true
            schema:
                type: "integer"

        securities:
            name: "securities"
            description: "Comma-separated list of security symbols"
            in: query
            required: true
            schema:
                type: "array"
                items:
                    type: "string"

        query:
            name: "query"
            description: "Query to search for securities."
            in: query
            required: true
            schema:
                type: "string"



paths:
    /signup:
        post:
            operationId: "auth.signup"
            tags:
                - Authentication
            summary: "Sign up a new user"
            requestBody:
                description: "User credentials"
                required: true
                x-body-name: "credentials"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
            responses:
                "201":
                    $ref: "#/components/responses/Success"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /login:
        post:
            operationId: "auth.login"
            tags:
                - Authentication
            summary: "Login to the website"
            requestBody:
                description: "User credentials"
                required: true
                x-body-name: "credentials"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
            responses:
                "200":
                    $ref: "#/components/responses/Success"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "404":
                    $ref: "#/components/responses/NotFound"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /change-password:
        post:
            operationId: "auth.change_password"
            tags:
                - Authentication
            summary: "Change the user password"
            requestBody:
                description: "User passwords"
                x-body-name: "passwords"
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            required:
                                - current_password
                                - new_password
                            properties:
                                current_password:
                                    type: "string"
                                new_password:
                                    type: "string"
            responses:
                "200":
                    $ref: "#/components/responses/Success"
                "400":
                    $ref: "#/components/responses/BadRequest"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /securities/search:
        get:
            operationId: "securities.search"
            tags:
                - Securities
            summary: "Search for the securities"
            parameters:
                - $ref: "#/components/parameters/query"
            responses:
                "200":
                    description: "Successfully read securities list"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Security"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /currencies:
        get:
            operationId: "currencies.read_all"
            tags:
                - Currencies
            summary: "Read the currencies list"
            responses:
                "200":
                    description: "Successfully read securities list"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Currency"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /portfolios:
        get:
            operationId: "portfolios.read_all"
            tags:
                - Portfolios
            summary: "Read the list of portfolios"
            responses:
                "200":
                    description: "Successfully read portfolios list"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Portfolio"
                "401":
                    $ref: "#/components/responses/Unauthorized"

        post:
            operationId: "portfolios.create"
            tags:
                - Portfolios
            summary: "Create a portfolio"
            requestBody:
                description: "Portfolio to create"
                required: true
                x-body-name: "portfolio"
                content:
                    # Define data exchange format
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Portfolio"
            responses:
                # The request succeeded, and a new resource
                # was created as a result
                "201":
                    description: "Successfully created portfolio"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /portfolios/{portfolio_id}:
        get:
            operationId: "portfolios.read_one"
            tags:
                - Portfolios
            summary: "Read one portfolio"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
            responses:
                "200":
                    description: "Successfully read portfolio"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"

        put:
            operationId: "portfolios.update"
            tags:
                - Portfolios
            summary: "Update a portfolio"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
            requestBody:
                x-body-name: "portfolio"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Portfolio"
            responses:
                "200":
                    description: "Successfully updated portfolio"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"

        delete:
            operationId: "portfolios.delete"
            tags:
                - Portfolios
            summary: "Delete a portfolio"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
            responses:
                "204":
                    description: "Successfully deleted portfolio"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /portfolios/{portfolio_id}/trades:
        get:
            operationId: "trades.read_all"
            tags:
                - Trades
            summary: "Read the list of trades for a given portfolio"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
            responses:
                "200":
                    description: "Successfully read trades list"
                    content:
                        application/json:
                            schema:
                                type: "array"
                "401":
                    $ref: "#/components/responses/Unauthorized"

        post:
            operationId: "trades.create"
            tags:
                - Trades
            summary: "Create a trade"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
            requestBody:
                description: "Trade to create"
                required: true
                x-body-name: "trade_params"
                content:
                    # Define data exchange format
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Trade"
            responses:
                # The request succeeded, and a new resource
                # was created as a result
                "201":
                    description: "Successfully created trade"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /portfolios/{portfolio_id}/trades/{trade_id}:
        get:
            operationId: "trades.read_one"
            tags:
                - Trades
            summary: "Read one trade"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
                - $ref: "#/components/parameters/trade_id"
            responses:
                "200":
                    description: "Successfully read trade"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"
        put:
            operationId: "trades.update"
            tags:
                - Trades
            summary: "Update a trade"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
                - $ref: "#/components/parameters/trade_id"
            requestBody:
                x-body-name: "trade_params"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Trade"
            responses:
                "200":
                    description: "Successfully updated trade"
                    content:
                        application/json:
                            schema:
                                type: "object"
                "401":
                    $ref: "#/components/responses/Unauthorized"

        delete:
            operationId: "trades.delete"
            tags:
                - Trades
            summary: "Delete a trade"
            parameters:
                - $ref: "#/components/parameters/portfolio_id"
                - $ref: "#/components/parameters/trade_id"
            responses:
                "204":
                    description: "Successfully deleted trade"
                "401":
                    $ref: "#/components/responses/Unauthorized"

    /streams/quotes:
        get:
            operationId: "streams.quotes"
            tags:
                - Streams
            summary: "Subscribe for real-time updates of security quotes"
            parameters:
                - $ref: "#/components/parameters/securities"
            responses:
                "200":
                    description: "Successfully subscribed for security quotes updates"
                    content:
                        text/event-stream:
                            schema:
                                type: "string"
